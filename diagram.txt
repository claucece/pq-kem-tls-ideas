# PQ KEM TLS

## TLS 1.3

Figure 1 below shows the basic full TLS handshake:

       Client                                           Server

Key  ^ ClientHello
Exch | + key_share*
     | + signature_algorithms*
     | + psk_key_exchange_modes*
     v + pre_shared_key*       -------->
                                                  ServerHello  ^ Key
                                                 + key_share*  | Exch
                                            + pre_shared_key*  v
                                        {EncryptedExtensions}  ^  Server
                                        {CertificateRequest*}  v  Params
                                               {Certificate*}  ^
                                         {CertificateVerify*}  | Auth
                                                   {Finished}  v
                               <--------  [Application Data*]
     ^ {Certificate*}
Auth | {CertificateVerify*}
     v {Finished}              -------->
       [Application Data]      <------->  [Application Data]

              +  Indicates noteworthy extensions sent in the
                 previously noted message.

              *  Indicates optional or situation-dependent
                 messages/extensions that are not always sent.

              {} Indicates messages protected using keys
                 derived from a [sender]_handshake_traffic_secret.

              [] Indicates messages protected using keys
                 derived from [sender]_application_traffic_secret_N.

               Figure 1: Message Flow for Full TLS Handshake

The handshake can be thought of as having three phases (indicated in
the diagram above):

-  Key Exchange: Establish shared keying material and select the
   cryptographic parameters.  Everything after this phase is
   encrypted.

-  Server Parameters: Establish other handshake parameters
   (whether the client is authenticated, application-layer protocol
   support, etc.).

-  Authentication: Authenticate the server (and, optionally, the
   client) and provide key confirmation and handshake integrity.

In the Key Exchange phase, the client sends the ClientHello message,
which contains a random nonce (ClientHello.random); its offered protocol
versions; a list of symmetric cipher/HKDF hash pairs; either a set of
Diffie-Hellman key shares (in the "key_share" extension), a set of
pre-shared key labels (in the "pre_shared_key" extension), or both; and
potentially additional extensions. Additional fields and/or messages may also
be present for middlebox compatibility.

## PQ KEM TLS 1.3 for Server Authentication

Figure 2 below shows the basic full server auth PQ KEM TLS handshake:

       Client                                           Server

Key  ^ ClientHello
Exch | + key_share (traditional + KEM key share)*
     v + signature_algorithms (traditional + KEM)* -------->
                                                  ServerHello  ^ Key
                    + key_share* (traditional + KEM key share) v Exch
                                        {EncryptedExtensions}  | Server Params
                                               {Certificate}   ^
Auth | {ClientKemCiphertext}                                   |  Auth
     | {Finished}                                              |
     | [Application Data*]     -------->                       |
     |                                             {Finished}  |
 v   |                                                         v
       [Application Data]      <------->  [Application Data]

              +  Indicates noteworthy extensions sent in the
                 previously noted message.

              *  Indicates optional or situation-dependent
                 messages/extensions that are not always sent.

              {} Indicates messages protected using keys
                 derived from a [sender]_handshake_traffic_secret.

              [] Indicates messages protected using keys
                 derived from [sender]_application_traffic_secret_N.

               Figure 2: Message Flow for Full TLS Server Auth Handshake

In the Key Exchange phase, the client sends the ClientHello message,
which contains a random nonce (ClientHello.random); its offered protocol
versions (which must include TLS 1.3); a list of symmetric cipher/HKDF hash pairs;
either a set of Diffie-Hellman key shares and KEM keyshares (in
the "key_share" extension, with the corresponding "supported_group" extension -with the
corresponding KEM groups offered in it-), a set of pre-shared key labels (in
the "pre_shared_key" extension), or both; the signature_algorithms extension with the
corresponding KEM group (A "signature_algorithms_dc" extension may also be
added to indicate delegated credential signature algorithms), and potentially
additional extensions. Additional fields and/or messages may also be present for
middlebox compatibility.

The server processes the ClientHello and determines the appropriate
cryptographic parameters for the connection.  It then responds with
its own ServerHello, which indicates the negotiated connection parameters.
The combination of the ClientHello and the ServerHello determines the shared
keys.  If KEM key establishment is in use, then the ServerHello contains
a "key_share" extension with the server's ephemeral KEM share; the server's
share MUST be in the same group as one of the client's shares.  If PSK key
establishment is in use, then the ServerHello contains a "pre_shared_key"
extension indicating which of the client's offered PSKs was selected.
Note that implementations can use KEM, (EC)DHE and PSK together, in which case
both extensions will be supplied.

The server then sends a message to establish the Server Parameters:

EncryptedExtensions:  responses to ClientHello extensions that are
   not required to determine the cryptographic parameters, other than
   those that are specific to individual certificates.
   [Section 4.3.1]

Finally, the client and server exchange Authentication messages. PQ KEM TLS
uses the same set of messages every time that certificate-based
authentication is needed.  (PSK-based authentication happens as a
side effect of key exchange.)  Specifically:

Certificate:  The certificate of the endpoint and any per-certificate
   extensions.  This message is omitted by the server if not
   authenticating with a certificate. The long-term KEM public key
   should be in it.

ClientKEMCiphertext: an encapsulation against the long-term KEM public key,
   which yield an implicitly unauthenticated shared secret, used to derive
   authenticated handshake traffic secrets and a master secret.

Finished:  A MAC (Message Authentication Code) over the entire
   handshake.  This message provides key confirmation, binds the
   endpoint's identity to the exchanged keys, and in PSK mode also
   authenticates the handshake.  [Section 4.4.4]

At this point, the handshake is complete, and the client and server
derive the keying material required by the record layer to exchange
application-layer data protected through authenticated encryption.
Application Data MUST NOT be sent prior to sending the Finished
message, except as specified in Section 2.3.  Note that while the
server may send Application Data prior to receiving the client's
Authentication messages, any data sent at that point is, of course,
being sent to an unauthenticated peer.

## PQ KEM TLS 1.3 for Client Authentication

Figure 3 below shows the basic full server and client auth PQ KEM TLS handshake:

       Client                                           Server

Key  ^ ClientHello
Exch | + key_share (traditional + KEM key share)*
     v + signature_algorithms (traditional + KEM)* -------->
                                                  ServerHello  ^ Key
                    + key_share* (traditional + KEM key share) v Exch
                                        {EncryptedExtensions}  ^  Server
                                        {CertificateRequest*}  v  Params
                                               {Certificate*}  ^
Auth | {ClientKemCiphertext*}                                  |  Auth
     | {Certificate*}           -------->                      |
     |                         <------ {ServerKEMCiphertext*}  |
     | {Finished}               -------->                      |
     | [Application Data*]      -------->                      |
                                                   {Finished}  |
                                                               v
       [Application Data]      <------->  [Application Data]

              +  Indicates noteworthy extensions sent in the
                 previously noted message.

              *  Indicates optional or situation-dependent
                 messages/extensions that are not always sent.

              {} Indicates messages protected using keys
                 derived from a [sender]_handshake_traffic_secret.

              [] Indicates messages protected using keys
                 derived from [sender]_application_traffic_secret_N.

               Figure 3: Message Flow for Full TLS Server and Client Auth Handshake

### Phase 1: Ephemeral key exchange using KEMs

After establishing the TCP connection, the KEMTLS handshake begins with
the client sending one or more ephemeral KEM public keys pk𝑒 in its ClientHello
message, as well as the list of public key authentication, key exchange, and
authenticated encryption methods it supports. The server responds in the
ServerHello message with an encapsulation ct𝑒 against pk𝑒 and the algorithms
it selected from the client’s proposal; note that if (none of) the pk𝑒 the
client sent was for the key-exchange method the server selected,
a special HelloRetryRequest message is sent, prompting a new ClientHello message.
Nonces 𝑟𝑐 and 𝑟𝑠 are also transmitted for freshness. At this point, the client
and server have an unauthenticated shared secret ss𝑒 . KEMTLS follows the
TLS 1.3 key schedule, which applies a sequence of HKDF operations to the shared
secret ss𝑒 and the transcript to derive (a) the client and server handshake
traffic secrets CHTS and SHTS which are used to encrypt subsequent flows in the
handshake, and (b) a “derived handshake secret” dHS which is kept as the current
secret state of the key schedule.

### Phase 2: Implicitly authenticated key exchange using KEMs

In the same server-to-client flight as ServerHello, the server also sends a
certificate containing its long-term KEM public key pk𝑆. The server also
sends a CertificateRequest. The client encapsulates against pk𝑆 and sends the
resulting ciphertext in its ClientKemCiphertext message. This yields an
implicitly authenticated shared secret ss𝑆. The key schedule’s secret state dHS
from phase 1 is combined with ss𝑆 using HKDF to give a “authenticated handshake
secret” AHS from which are derived (c) the client and server authenticated
handshake traffic secrets CAHTS and SAHTS which are used to encrypt subsequent
flows in the handshake, and (d) an updated secret state dAHS of the key schedule.
At this point, a client sends its certificate, which contains its long-term KEM
public key pkC. The server encapsulates against pkC and sends the resulting
ciphertext in its ServerKemCiphertext message. This yields an implicitly
authenticated shared secret ssC.

The key schedule’s secret state dAHS is combined with ssC using HKDF to give an
master secret MS.  From the master secret, several more keys are derived:
(e) “finished keys” fk𝑐 and fk𝑠 which will be used to authenticate the
handshake and (f) client and server application transport secrets CATS and SATS
from which are derived application encryption keys. The client now sends a
confirmation message ClientFinished to the server which uses a message
authentication code with key fk𝑐 to authenticate the handshake transcript. In
the same flight of messages, the client is also able to start sending
application data encrypted under keys derived from CATS; this is implicitly
authenticated.

### Phase 3: Confirmation / explicit authentication

The server responds with its confirmation in the ServerFinished message,
authenticating the handshake transcript using MAC key fk𝑠. In the same flight,
the server sends application data encrypted under keys derived from SATS. Once
the client receives and verifies ServerFinished, the server is explicitly
authenticated.
